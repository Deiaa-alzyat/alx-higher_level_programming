How to use `BaseGeometry`

Import the class:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Testing:

    >>> bg = BaseGeometry()
    
    >>> bg.integer_validator("my_int", 10)

    >>> bg.integer_validator("width", 20)

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

    >>> bg.integer_validator("Deiaa", "Maher")
    Traceback (most recent call last):
    TypeError: name must be an integer

    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
    ValueError: age must be greater than 0
    
    >>> bg.integer_validator("distance", -100)
    Traceback (most recent call last):
    ValueError: distance must be greater than 0

    >>> bg.integer_validator("x_bar", 7.8)
    Traceback (most recent call last):
    TypeError: average must be an integer

    >>> bg.integer_validator("x_bar")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator("NaN", float('nan'))
    Traceback (most recent call last):
    TypeError: NaN must be an integer

    >>> bg.integer_validator("v_Big", 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)

    >>> bg.integer_validator("age", (7;))
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", [7])
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", False)
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", {5, 12})
    Traceback (most recent call last):
    TypeError: age must be an integer

    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
    TypeError: age must be an integer
